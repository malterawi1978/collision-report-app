import os
import io
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from openai import OpenAI

# Set up Streamlit page
st.set_page_config(page_title="Collision Report Generator", layout="centered")
st.title("üö¶ Collision Analysis Report Generator")
st.markdown("Upload your Excel accident data file to generate a Word report with visual charts and AI-generated summaries.")

# Initialize OpenAI client
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Upload section
uploaded_file = st.file_uploader("üìÇ Upload your Excel file", type=["xlsx"])

if uploaded_file:
    with st.spinner("‚è≥ Generating your report... please wait..."):
        df = pd.read_excel(uploaded_file)
        st.success("‚úÖ File uploaded and read successfully.")

        # Setup report document
        doc = Document()
        doc.add_heading("Collision Analysis Report", 0)
        doc.add_paragraph("Generated by Mobility Edge Solution")
        doc.add_page_break()

        section_counter = 1

        def add_chart_and_summary(column, title, chart_type='bar'):
            nonlocal section_counter
            counts = df[column].value_counts()
            if len(counts) < 2:
                return

            img_stream = io.BytesIO()
            plt.figure(figsize=(6, 4))
            if chart_type == 'pie' and len(counts) <= 6:
                plt.pie(counts, labels=counts.index, autopct='%1.1f%%')
            else:
                counts.plot(kind='bar')
                plt.xticks(rotation=45, ha='right')
            plt.title(title)
            plt.tight_layout()
            plt.savefig(img_stream, format='png')
            plt.close()
            img_stream.seek(0)

            # GPT prompt
            prompt = (
                f"You are a road safety analyst. Write a short professional summary "
                f"of this accident chart titled '{title}'.\n\n"
                f"Data: {counts.to_string()}\n\n"
                f"Highlight the most common types and any interesting patterns."
            )
            try:
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=250
                )
                summary = response.choices[0].message.content.strip()
            except Exception as e:
                summary = f"[GPT error: {e}]"

            # Add to Word doc
            doc.add_heading(f"Section {section_counter}: {title}", level=1)
            doc.add_picture(img_stream, width=Inches(5.5))
            caption = doc.add_paragraph(f"Figure {section_counter}: {title} Distribution")
            caption.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            caption.runs[0].italic = True
            para = doc.add_paragraph(summary)
            para.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
            para.runs[0].font.size = Pt(11)
            doc.add_page_break()
            section_counter += 1

        # Section 1: Severity Distribution
        if 'Classification Of Accident' in df.columns:
            add_chart_and_summary('Classification Of Accident', 'Accident Severity', chart_type='pie')

        # Section 2: Severity by Location (requires grouped bar chart)
        if 'Classification Of Accident' in df.columns and 'Location' in df.columns:
            try:
                grouped = df.groupby(['Location', 'Classification Of Accident']).size().unstack(fill_value=0)
                img_stream = io.BytesIO()
                grouped.plot(kind='bar', stacked=True, figsize=(6,4))
                plt.title('Severity by Location')
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                plt.savefig(img_stream, format='png')
                plt.close()
                img_stream.seek(0)

                prompt = f"You are a road safety analyst. Summarize trends from accident severity by location.\n\n{grouped.head().to_string()}"
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=250
                )
                summary = response.choices[0].message.content.strip()

                doc.add_heading(f"Section {section_counter}: Severity by Location", level=1)
                doc.add_picture(img_stream, width=Inches(5.5))
                caption = doc.add_paragraph(f"Figure {section_counter}: Severity by Location")
                caption.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                caption.runs[0].italic = True
                para = doc.add_paragraph(summary)
                para.alignment = WD_PARAGRAPH_ALIGNMENT.JUSTIFY
                para.runs[0].font.size = Pt(11)
                doc.add_page_break()
                section_counter += 1

            except Exception as e:
                st.warning(f"Skipped Severity by Location: {e}")

        # Time-based trends
        for time_col in ['Accident Year', 'Accident Month', 'Accident Day', 'Accident Time']:
            if time_col in df.columns:
                add_chart_and_summary(time_col, f"Accidents by {time_col}")

        # Environmental conditions
        for env_col in ['Light', 'Environment Condition 1', 'Environment Condition 2']:
            if env_col in df.columns:
                add_chart_and_summary(env_col, env_col)

        # Driver Actions and Conditions
        for driver_col in ['Apparent Driver 1 Action', 'Apparent Driver 2 Action', 'Driver 1 Condition', 'Driver 2 Condition']:
            if driver_col in df.columns:
                add_chart_and_summary(driver_col, driver_col)

        # Placeholder for Section 7 (XY Coordinates)
        doc.add_heading(f"Section {section_counter}: Spatial Plot of Accidents (Pending)", level=1)
        doc.add_paragraph("[This section will include a map visualization based on accident coordinates.]")
        doc.add_page_break()
        section_counter += 1

        # Placeholder for Section 8 (Collision Type Diagrams)
        doc.add_heading(f"Section {section_counter}: Collision Type Diagrams (Pending)", level=1)
        doc.add_paragraph("[This section will include annotated diagrams for common collision types.]")
        doc.add_page_break()
        section_counter += 1

        # Save and provide download
        output_path = "collision_report.docx"
        doc.save(output_path)
        st.success("‚úÖ Report generated!")
        with open(output_path, "rb") as f:
            st.download_button("üì• Download Word Report", f, file_name="collision_report.docx")
else:
    st.info("üìÑ Please upload an Excel file to begin.")
